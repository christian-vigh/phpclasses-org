<?php
/**************************************************************************************************************

    NAME
        MysqlPackage.php

    DESCRIPTION
        Implements a PHP package currently installed in Wamp.

    AUTHOR
        Christian Vigh, 11/2015.

    HISTORY
    [Package : 1.0]    [Date : 2015/11/15]     [Author : CV]
        Initial Package.

 **************************************************************************************************************/


/*==============================================================================================================

    MysqlPackage class -
        Holds configuration data for one installed PHP Package.

  ==============================================================================================================*/
class  MySqlPackage		extends		WampService
   {
	public function  __construct ( $name, $parent, $path, $version )
	   {
		parent::__construct 
		   ( 
			$name, $parent, $path, $version, 
			$parent -> GetConfigurationValue ( 'service', 'servicemysql' ),
			$parent -> GetConfigurationValue ( 'mysql', 'mysqlexedir' ),	
			$parent -> GetConfigurationValue ( 'mysql', 'mysqlexefile' ),
			$parent -> GetConfigurationValue ( 'mysql', 'mysqlconfdir' ),
			$parent -> GetConfigurationValue ( 'mysql', 'mysqlconffile' )
		    ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    GetConfigurationFiles -
		Returns the list of MySql configuration files (well, we only have my.ini...).

	 *-------------------------------------------------------------------------------------------------------------*/
	public function  GetConfigurationFiles ( )
	   {
		return 
		   ([ 
			$this -> ConfigurationFile
		     ]) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    GetLogFiles -
		Returns the list of Mysql log files.

	 *-------------------------------------------------------------------------------------------------------------*/
	public function  GetLogFiles ( )
	   {
		$contents	=  file_get_contents ( $this -> ConfigurationFile ) ;
		
		if  ( preg_match ( '/\n \s* log-error \s* = \s* (?P<file> [^\s]+)/imsx', $contents, $match ) )
		   {
			return 
			   ([ 
				$this -> GetAbsolutePath ( $match [ 'file' ] ) 
			     ]) ;
		    }
		else
			return ( [] ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    Install -
		Installs a new Mysql service.

	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Install ( $service_name, $configuration_file )
	   {
		static	$mysql_hello_string	=  "N\x00\x00\x00" ;

		parent::Install ( $service_name, $configuration_file ) ;

		// Load mysl configuration file
		$ini	=  IniFile::LoadFromFile ( $configuration_file ) ;
		
		// Check if the configuration file contains a section with the same name as the service
		if  ( ! $ini -> IsSectionDefined ( $service_name ) )
			throw ( new WampException ( "The configuration file \"$configuration_file\" must contain a section [$service_name] " .
					"for MySql service \"$service_name\"." ) ) ;

		// Try to connect to specified mysql port - if successful, then this means that mysql (or something else)
		// is already listening to that port
		$port	=  $ini -> GetKey ( $service_name, 'Port', 3306 ) ;
		$fp	=  @fsockopen ( '127.0.0.1', $port, $errno, $errstr, 5 ) ;

		if  ( $fp )
		   {
			stream_set_blocking ( $fp, 0 ) ;
			usleep ( 20000 ) ;
			$data	=  fgets ( $fp ) ;
			fclose ( $fp ) ;

			if  ( ! strncmp ( $data, $mysql_hello_string, strlen ( $mysql_hello_string ) ) )
				throw ( new WampException ( "Port $port defined in the mysql service \"$service_name\" is already opened by another mysql instance." ) ) ;
			else
				throw ( new WampException ( "Port $port defined in the mysql service \"$service_name\" is already opened by another process." ) ) ;
		    }

		// No one is currently listening to this port so it is safe to install a new mysql instance
		$command	=  '"' . $this -> ExecutableFile . '" ' .	
				   "--install $service_name --defaults-file=" .
				   Path::ToUnix ( Path::RealPath ( $configuration_file ) ) .
				   " 2>&1" ;
		exec ( $command, $output ) ;

		return ( implode ( "\n", $output ) ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    Uninstall -
		Installs a new Mysql service.

	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Uninstall ( $service_name )
	   {
		parent::Uninstall ( $service_name ) ;

		$command	=  '"' . $this -> ExecutableFile . '" ' .	
				   "--remove $service_name" ;
				   " 2>&1" ;
		exec ( $command, $output ) ;

		return ( implode ( "\n", $output ) ) ;
	    }
    }
