<?php
/**************************************************************************************************************

    NAME
        WampPackage.phpclass

    DESCRIPTION
        Abstract base class for a single Wamp package.

    AUTHOR
        Christian Vigh, 11/2015.

    HISTORY
    [Version : 1.0]    [Date : 2015/11/15]     [Author : CV]
        Initial version.

 **************************************************************************************************************/


/*==============================================================================================================

	Optional module interfaces.

  ==============================================================================================================*/
interface	WampRestartableModule
   {
	public function		Start		( ) ;
	public function		Stop		( ) ;
	public function		Restart		( ) ;
	public function		IsRunning	( ) ;
    }


interface	WampInstallableModule
   {
	public function		Install		( $service_name, $configuration_file ) ;
	public function		Uninstall	( $service_name ) ;
    }


interface	WampConfigurableModule 
   {
	const	STATE_ENABLED			=  0 ;
	const	STATE_DISABLED			=  1 ;
	const	STATE_ENABLED_MISSING		=  2 ;
	const   STATE_DISABLED_MISSING		=  3 ;


	public function		GetModules		( ) ;
    }


/*==============================================================================================================

    WampPackage class -
        Base class for a wamp package (PHP, MySql and Apache).

  ==============================================================================================================*/
abstract class  WampPackage
   {
	// Package name
	public			$Name ;
	// Package path
	public			$Path ;
	// Executable file
	public			$ExecutableFile ;
	// Configuration directory and main configuration file
	public			$ConfigurationDirectory ;
	public			$ConfigurationFile ;
	// Current package version
	public			$Version ;
	// Wamp configuration parent object
	protected		$Parent ;


	/*--------------------------------------------------------------------------------------------------------------
	 
	    Constructor -
		Creates a Wamp Package that holds configuration data for a specific Package version.
  
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __construct ( $name, $parent, $path, $version, $exedir, $exefile, $confdir, $conffile )
	   {
		$this -> Name		=  $name ;
		$this -> Parent		=  $parent ;
		$this -> Path		=  Path::ToHost ( $path ) ;
		$this -> Version	=  $version ;

		$exe	=  $this -> Path . '\\' . $exedir . '\\' . $exefile ;
		$this -> ExecutableFile	=  Path::ToHost ( Path::RealPath ( $exe ) ) ;

		if  ( Path::IsAbsolute ( $confdir ) )
			$this -> ConfigurationDirectory		=  $confdir ;
		else
			$this -> ConfigurationDirectory		=  Path::ToHost ( Path::RealPath ( $this -> Path . '\\' . $confdir ) ) ;

		$this -> ConfigurationFile	=  $this -> GetAbsolutePath ( $conffile ) ;

		if  ( ! file_exists ( $this -> ConfigurationFile ) )
			error ( new WampException ( "Configuration file \"{$this -> ConfigurationFile}\" does not exist." ) ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    GetAbsolutePath -
		If the specified path is relative, returns its absolute path.
  
	 *-------------------------------------------------------------------------------------------------------------*/
	protected function  GetAbsolutePath ( $path, $root = false )
	   {
		if  ( Path::IsAbsolute ( $path ) )
			return ( $path ) ;
		else
		   {
			if  ( ! $root )
				$root =  $this -> ConfigurationDirectory ;

			return ( Path::ToHost ( Path::Realpath ( "$root\\$path" ) ) ) ;
		    }
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
		Methods to be implemented by derived classes.
  
	 *-------------------------------------------------------------------------------------------------------------*/

	// Returns the path(s) of the log file(s) generated by the current package
	public abstract function  GetLogfiles ( ) ;

	// Returns the path(s) of configuration files
	public abstract function  GetConfigurationFiles ( ) ;
    }


/*==============================================================================================================

    WampModule class -
        Base class for a wamp module.
	A wamp module is a package that needs the mysql and apache services when a configuration option is
	modified.

  ==============================================================================================================*/
abstract class  WampModule		extends		WampPackage
					implements	WampRestartableModule
   {
	/*--------------------------------------------------------------------------------------------------------------
	 
	    Constructor -
		Creates a Wamp module that holds configuration data for a specific Package version.
  
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __construct ( $name, $parent, $path, $version, $exedir, $exefile, $confdir, $conffile )
	   {
		parent::__construct ( $name, $parent, $path, $version, $exedir, $exefile, $confdir, $conffile ) ;
	    }


  	/*--------------------------------------------------------------------------------------------------------------
	 
	    WampRestartableModule interface implementation -
		Derived classes do not need to implement them, since the code is the same.
		Note that the Start/Stop/Restart methods will throw an exception if the service cannot be started or
		stopped within a certain period of time.
  
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  IsRunning ( )
	   {
		$rs	=  $this -> Parent -> Wmi -> Query ( "SELECT * FROM Win32_Service WHERE name = '{$this -> ServiceName}'" ) ;

		return ( count ( $rs )  !==  0  &&  ! strcasecmp ( $rs [0] -> State, 'running' ) ) ;
	    }


	public function  Start		( ) 
	   {
		if  ( $this -> IsRunning ( ) )
			return ( false ) ;

		$this -> Parent -> WShell -> Exec ( "NET START \"{$this -> ServiceName}\"" ) ;
		$this -> Parent -> AwaitService ( $this -> ServiceName, true ) ;

		return ( true ) ;
	    }
 

	public function  Stop		( ) 
	   {
		if  ( ! $this -> IsRunning ( ) )
			return ( false ) ;

		$this -> Parent -> WShell -> Exec ( "NET STOP \"{$this -> ServiceName}\"" ) ;
		$this -> Parent -> AwaitService ( $this -> ServiceName, false ) ;

		return ( true ) ;
	    }
 

	public function  Restart	( ) 
	   {
		$old_status	=  $this -> Stop ( ) ;
		$new_status	=  $this -> Start ( ) ;

		return ( [ $new_status, $old_status ] ) ;
	    }


   }


/*==============================================================================================================

    WampService class -
        Base class for a wamp service.

  ==============================================================================================================*/
abstract class  WampService		extends		WampModule
					implements	WampInstallableModule
   {
	public		$ServiceName ;


	/*--------------------------------------------------------------------------------------------------------------
	 
	    Constructor -
		Creates a Wamp module that holds configuration data for a specific Package version.
  
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __construct ( $name, $parent, $path, $version, $service_name, $exedir, $exefile, $confdir, $conffile )
	   {
		parent::__construct ( $name, $parent, $path, $version, $exedir, $exefile, $confdir, $conffile ) ;
		
		$this -> ServiceName			=  $service_name ;
	    }


 	/*--------------------------------------------------------------------------------------------------------------
	 
		WampInstallableModule interface implementation. These functions must be called by derived classes
		to perform basic checkings.
  
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Install	( $service_name, $configuration_file ) 
	   { 
		$wmi	=  new Wmi ( ) ;
		$query	=  "SELECT * FROM Win32_Service WHERE Name = '$service_name'" ;
		$result =  $wmi -> Query ( $query ) ;

		if  ( $result )
			error ( new WampException ( "Service \"$service_name\" is already configured and cannot be installed." ) ) ;

		if  ( ! file_exists ( $configuration_file ) )
			error ( new WampException ( "Service-specific configuration file \"$configuration_file\" does not exist." ) ) ;
	    }


	public function  Uninstall	( $service_name )
	   { 
		$wmi	=  new Wmi ( ) ;
		$query	=  "SELECT * FROM Win32_Service WHERE Name = '$service_name'" ;
		$result =  $wmi -> Query ( $query ) ;

		if  ( ! $result )
			error ( new WampException ( "Service \"$service_name\" is not configured and cannot be uninstalled." ) ) ;

		@exec ( "NET STOP $service_name 2>&1", $junk ) ;
	    }
    }
